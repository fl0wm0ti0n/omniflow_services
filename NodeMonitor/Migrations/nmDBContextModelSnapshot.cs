// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodeMonitor.Models;

namespace NodeMonitor.Migrations
{
    [DbContext(typeof(nmDBContext))]
    partial class nmDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.AbonementEntity", b =>
                {
                    b.Property<int>("AbonementEntityEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbonementTargetTypEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserFk")
                        .HasColumnType("int");

                    b.HasKey("AbonementEntityEntityId");

                    b.HasIndex("AbonementTargetTypEntityId");

                    b.ToTable("generic_Abonement");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.AbonementSourceTypEntity", b =>
                {
                    b.Property<int>("AbonementSourceTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbonementSourceTypEntityId");

                    b.ToTable("generic_AbonementSourceTyp");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.AbonementTargetTypEntity", b =>
                {
                    b.Property<int>("AbonementTargetTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbonementTargetTypEntityId");

                    b.ToTable("generic_AbonementTyp");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.AbonementsToSourcesEntity", b =>
                {
                    b.Property<int>("AbonementEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AbonementSourceTypEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AbonementsSourcesEntityId")
                        .HasColumnType("int");

                    b.HasKey("AbonementEntityId", "AbonementSourceTypEntityId");

                    b.HasIndex("AbonementSourceTypEntityId");

                    b.ToTable("generic_AbonementsToSources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.DeviceTypEntity", b =>
                {
                    b.Property<int>("DeviceTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceTypEntityId");

                    b.ToTable("generic_DeviceTypes");

                    b.HasData(
                        new
                        {
                            DeviceTypEntityId = 1,
                            Name = "Messenger"
                        },
                        new
                        {
                            DeviceTypEntityId = 2,
                            Name = "Email"
                        },
                        new
                        {
                            DeviceTypEntityId = 3,
                            Name = "Telephone"
                        },
                        new
                        {
                            DeviceTypEntityId = 4,
                            Name = "WebUI"
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.FunctionEntity", b =>
                {
                    b.Property<int>("FunctionEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivilegeEntityId")
                        .HasColumnType("int");

                    b.HasKey("FunctionEntityId");

                    b.HasIndex("PrivilegeEntityId");

                    b.ToTable("generic_Functions");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.PrivilegeEntity", b =>
                {
                    b.Property<int>("PrivilegeEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivilegeEntityId");

                    b.ToTable("generic_Privileges");

                    b.HasData(
                        new
                        {
                            PrivilegeEntityId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            PrivilegeEntityId = 2,
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleDaysEntity", b =>
                {
                    b.Property<int>("ScheduleDaysEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleDaysEntityId");

                    b.ToTable("generic_ScheduleDays");

                    b.HasData(
                        new
                        {
                            ScheduleDaysEntityId = 1,
                            Name = "Montag"
                        },
                        new
                        {
                            ScheduleDaysEntityId = 2,
                            Name = "Dienstag"
                        },
                        new
                        {
                            ScheduleDaysEntityId = 3,
                            Name = "Mittwoch"
                        },
                        new
                        {
                            ScheduleDaysEntityId = 4,
                            Name = "Donnerstag"
                        },
                        new
                        {
                            ScheduleDaysEntityId = 5,
                            Name = "Freitag"
                        },
                        new
                        {
                            ScheduleDaysEntityId = 6,
                            Name = "Samstag"
                        },
                        new
                        {
                            ScheduleDaysEntityId = 7,
                            Name = "Sonntag"
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTaskEntity", b =>
                {
                    b.Property<int>("ScheduleTaskEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleTaskTypEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("SchedulesEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleTaskEntityId");

                    b.HasIndex("ScheduleTaskTypEntityId");

                    b.HasIndex("SchedulesEntityId");

                    b.ToTable("generic_ScheduleTasks");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTaskTypEntity", b =>
                {
                    b.Property<int>("ScheduleTaskTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleTaskTypEntityId");

                    b.ToTable("generic_ScheduleTaskTypes");

                    b.HasData(
                        new
                        {
                            ScheduleTaskTypEntityId = 1,
                            Name = "GetData"
                        },
                        new
                        {
                            ScheduleTaskTypEntityId = 2,
                            Name = "Message"
                        },
                        new
                        {
                            ScheduleTaskTypEntityId = 3,
                            Name = "empty"
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTriggerEntity", b =>
                {
                    b.Property<int>("ScheduleTriggerEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleTriggerTypEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("SchedulesEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleTriggerEntityId");

                    b.HasIndex("ScheduleTriggerTypEntityId")
                        .IsUnique();

                    b.HasIndex("SchedulesEntityId");

                    b.ToTable("generic_ScheduleTriggers");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTriggerTypEntity", b =>
                {
                    b.Property<int>("ScheduleTriggerTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleTriggerTypEntityId");

                    b.ToTable("generic_ScheduleTriggerTypes");

                    b.HasData(
                        new
                        {
                            ScheduleTriggerTypEntityId = 1,
                            Name = "GotData"
                        },
                        new
                        {
                            ScheduleTriggerTypEntityId = 2,
                            Name = "GotMessage"
                        },
                        new
                        {
                            ScheduleTriggerTypEntityId = 3,
                            Name = "ShutOffEvent"
                        },
                        new
                        {
                            ScheduleTriggerTypEntityId = 4,
                            Name = "ShutOnEvent"
                        },
                        new
                        {
                            ScheduleTriggerTypEntityId = 5,
                            Name = "TimedEvent"
                        },
                        new
                        {
                            ScheduleTriggerTypEntityId = 6,
                            Name = "LogEvent"
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTypEntity", b =>
                {
                    b.Property<int>("ScheduleTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleTypEntityId");

                    b.ToTable("generic_ScheduleTypes");

                    b.HasData(
                        new
                        {
                            ScheduleTypEntityId = 1,
                            Name = "Timed"
                        },
                        new
                        {
                            ScheduleTypEntityId = 2,
                            Name = "Triggered"
                        },
                        new
                        {
                            ScheduleTypEntityId = 3,
                            Name = "empty"
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SchedulesEntity", b =>
                {
                    b.Property<int>("SchedulesEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Intervall")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleTypEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TimedIntervall")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchedulesEntityId");

                    b.HasIndex("ScheduleTypEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("generic_Schedules");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SchedulesToDaysEntity", b =>
                {
                    b.Property<int?>("SchedulesEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleDaysEntityId")
                        .HasColumnType("int");

                    b.Property<int>("SchedulesToDaysEntityId")
                        .HasColumnType("int");

                    b.HasKey("SchedulesEntityId", "ScheduleDaysEntityId");

                    b.HasIndex("ScheduleDaysEntityId");

                    b.ToTable("generic_SchedulesToDays");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SchedulesToUsersEntity", b =>
                {
                    b.Property<int?>("SchedulesEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<int>("SchedulesToUsersEntityId")
                        .HasColumnType("int");

                    b.HasKey("SchedulesEntityId", "UserEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("generic_ScheduleToUsers");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SettingsEntity", b =>
                {
                    b.Property<int>("SettingsEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTyp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingsEntityId");

                    b.ToTable("generic_Settings");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.UserDeviceEntity", b =>
                {
                    b.Property<int>("UserDeviceEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceTypEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secrets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserDeviceEntityId");

                    b.HasIndex("DeviceTypEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("generic_UserDevices");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.UserEntity", b =>
                {
                    b.Property<int>("UserEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivilegesEntityId")
                        .HasColumnType("int");

                    b.HasKey("UserEntityId");

                    b.HasIndex("PrivilegesEntityId");

                    b.ToTable("generic_Users");

                    b.HasData(
                        new
                        {
                            UserEntityId = 1,
                            Active = true,
                            BirthDate = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lastname = "admin",
                            Name = "admin",
                            Nickname = "admin",
                            Password = "admin",
                            PrivilegesEntityId = 1
                        });
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.UserLocationEntity", b =>
                {
                    b.Property<int>("UserLocationEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("UserLocationEntityId");

                    b.HasIndex("UserEntityId")
                        .IsUnique();

                    b.ToTable("generic_UserLocation");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.FarmEntity", b =>
                {
                    b.Property<int>("FarmEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<string>("IyoOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefixZero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ThreebotId")
                        .HasColumnType("bigint");

                    b.HasKey("FarmEntityId");

                    b.ToTable("nodemon_Farm");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.FarmLocationEntity", b =>
                {
                    b.Property<int>("FarmLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City_farm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent_farm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_farm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Latitude_farm")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude_farm")
                        .HasColumnType("bigint");

                    b.HasKey("FarmLocationId");

                    b.HasIndex("FarmEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_FarmLocation");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.FarmerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IyoOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThreebotId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletAddressesWalletAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("WalletAddressesWalletAddressId");

                    b.ToTable("nodemon_Farmer");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.IfaceEntity", b =>
                {
                    b.Property<int>("IfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Macaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.HasKey("IfaceId");

                    b.HasIndex("NodeEntityId");

                    b.ToTable("nodemon_Iface");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeEntity", b =>
                {
                    b.Property<int>("NodeEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FreeToUse")
                        .HasColumnType("bit");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NodeIdV1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OsVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proofs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKeyHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("Uptime")
                        .HasColumnType("bigint");

                    b.Property<string>("WgPorts")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NodeEntityId");

                    b.HasIndex("FarmEntityId");

                    b.ToTable("nodemon_Node");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeHistoryEntity", b =>
                {
                    b.Property<int>("NodeHistoryEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("NodeEntityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("Uptime")
                        .HasColumnType("bigint");

                    b.HasKey("NodeHistoryEntityId");

                    b.HasIndex("NodeEntityId");

                    b.ToTable("nodemon_NodeHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeLocationEntity", b =>
                {
                    b.Property<int>("NodeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContinentNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LatitudeNode")
                        .HasColumnType("float");

                    b.Property<double>("LongitudeNode")
                        .HasColumnType("float");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.HasKey("NodeLocationId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_NodeLocation");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeLocationHistoryEntity", b =>
                {
                    b.Property<int>("NodeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContinentNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LatitudeNode")
                        .HasColumnType("float");

                    b.Property<double>("LongitudeNode")
                        .HasColumnType("float");

                    b.Property<int>("NodeHistoryEntityId")
                        .HasColumnType("int");

                    b.HasKey("NodeLocationId");

                    b.HasIndex("NodeHistoryEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_NodeLocationHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.PublicConfigEntity", b =>
                {
                    b.Property<int>("PublicConfigEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gw4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gw6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipv4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipv6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Master")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PublicConfigEntityId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique()
                        .HasFilter("[NodeEntityId] IS NOT NULL");

                    b.ToTable("nodemon_PublicConfig");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ReservedResourcesEntity", b =>
                {
                    b.Property<int>("ReservedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("ReservedResourcesId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_ReservedResources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ReservedResourcesHistoryEntity", b =>
                {
                    b.Property<int>("ReservedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeHistoryEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("ReservedResourcesId");

                    b.HasIndex("NodeHistoryEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_ReservedResourcesHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ResourcePriceEntity", b =>
                {
                    b.Property<int>("ResourcePriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Currency")
                        .HasColumnType("bigint");

                    b.Property<int>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<long>("Nru")
                        .HasColumnType("bigint");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("ResourcePriceId");

                    b.HasIndex("FarmEntityId");

                    b.ToTable("nodemon_ResourcePrice");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ThreefoldApiUriEntity", b =>
                {
                    b.Property<int>("ThreefoldApiUriEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("List")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThreefoldApiUriEntityId");

                    b.ToTable("nodemon_ThreefoldApiUriList");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.TokenHistoryEntity", b =>
                {
                    b.Property<int>("TokenHistoryEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmountOfTokens")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayOutDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TokenHistoryEntityId");

                    b.HasIndex("NodeEntityId");

                    b.ToTable("nodemon_TokenHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.TotalResourcesEntity", b =>
                {
                    b.Property<int>("TotalResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("TotalResourcesId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_TotalResources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.TotalResourcesHistoryEntity", b =>
                {
                    b.Property<int>("TotalResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeHistoryId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("TotalResourcesId");

                    b.HasIndex("NodeHistoryId")
                        .IsUnique();

                    b.ToTable("nodemon_TotalResourcesHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.UsedResourcesEntity", b =>
                {
                    b.Property<int>("UsedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int?>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("UsedResourcesId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique()
                        .HasFilter("[NodeEntityId] IS NOT NULL");

                    b.ToTable("nodemon_UsedResources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.UsedResourcesHistoryEntity", b =>
                {
                    b.Property<int>("UsedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeHistoryEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("UsedResourcesId");

                    b.HasIndex("NodeHistoryEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_UsedResourcesHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.WalletAddressEntity", b =>
                {
                    b.Property<int>("WalletAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FarmerEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TokenHistoryEntityId")
                        .HasColumnType("int");

                    b.HasKey("WalletAddressId");

                    b.HasIndex("FarmEntityId");

                    b.HasIndex("FarmerEntityId");

                    b.HasIndex("TokenHistoryEntityId");

                    b.ToTable("nodemon_WalletAddress");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.WorkloadsEntity", b =>
                {
                    b.Property<int>("WorkloadsEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Container")
                        .HasColumnType("bigint");

                    b.Property<long>("DelegateDomain")
                        .HasColumnType("bigint");

                    b.Property<long>("K8SVm")
                        .HasColumnType("bigint");

                    b.Property<long>("Network")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Proxy")
                        .HasColumnType("bigint");

                    b.Property<long>("ReverseProxy")
                        .HasColumnType("bigint");

                    b.Property<long>("Subdomain")
                        .HasColumnType("bigint");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.Property<long>("ZdbNamespace")
                        .HasColumnType("bigint");

                    b.HasKey("WorkloadsEntityId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_Workloads");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.AbonementEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.AbonementTargetTypEntity", "AbonementTargetTyp")
                        .WithMany("Abonements")
                        .HasForeignKey("AbonementTargetTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.AbonementsToSourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.AbonementEntity", "AbonementEntity")
                        .WithMany("AbonementsToSources")
                        .HasForeignKey("AbonementEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.AbonementSourceTypEntity", "AbonementSourceTyp")
                        .WithMany("AbonementsToSources")
                        .HasForeignKey("AbonementSourceTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.FunctionEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.PrivilegeEntity", "PrivilegeEntity")
                        .WithMany("FunctionEntity")
                        .HasForeignKey("PrivilegeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTaskEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.ScheduleTaskTypEntity", "ScheduleTaskTypEntity")
                        .WithMany("ScheduleTaskEntity")
                        .HasForeignKey("ScheduleTaskTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.SchedulesEntity", null)
                        .WithMany("ScheduleTasksEntity")
                        .HasForeignKey("SchedulesEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.ScheduleTriggerEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.ScheduleTriggerTypEntity", "ScheduleTriggerTypEntity")
                        .WithOne("ScheduleTriggerEntity")
                        .HasForeignKey("DatabaseLib.Entities.GenericEntities.ScheduleTriggerEntity", "ScheduleTriggerTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.SchedulesEntity", null)
                        .WithMany("ScheduleTriggerEntity")
                        .HasForeignKey("SchedulesEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SchedulesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.ScheduleTypEntity", "ScheduleTypEntity")
                        .WithMany("SchedulesEntity")
                        .HasForeignKey("ScheduleTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.UserEntity", "Creator")
                        .WithMany("SchedulesEntity")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SchedulesToDaysEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.ScheduleDaysEntity", "ScheduleDaysEntity")
                        .WithMany("SchedulesToDaysEntity")
                        .HasForeignKey("ScheduleDaysEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.SchedulesEntity", "SchedulesEntity")
                        .WithMany("SchedulesToDaysEntity")
                        .HasForeignKey("SchedulesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.SchedulesToUsersEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.SchedulesEntity", "SchedulesEntity")
                        .WithMany("SchedulesToUsersEntity")
                        .HasForeignKey("SchedulesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.UserEntity", "UserEntity")
                        .WithMany("SchedulesToUsersEntity")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.UserDeviceEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.DeviceTypEntity", "DeviceTypEntity")
                        .WithMany("UserDeviceEntity")
                        .HasForeignKey("DeviceTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.GenericEntities.UserEntity", "UserEntity")
                        .WithMany("UserDeviceEntity")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.UserEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.PrivilegeEntity", "PrivilegesEntity")
                        .WithMany("UserEntity")
                        .HasForeignKey("PrivilegesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.GenericEntities.UserLocationEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.UserEntity", "UserEntity")
                        .WithOne("LocationEntity")
                        .HasForeignKey("DatabaseLib.Entities.GenericEntities.UserLocationEntity", "UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.FarmLocationEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.FarmEntity", "FarmEntity")
                        .WithOne("Location")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.FarmLocationEntity", "FarmEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.FarmerEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.GenericEntities.UserEntity", "UserEntity")
                        .WithMany("FarmerEntity")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.WalletAddressEntity", "WalletAddresses")
                        .WithMany()
                        .HasForeignKey("WalletAddressesWalletAddressId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.IfaceEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithMany("Interfaces")
                        .HasForeignKey("NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.FarmEntity", "FarmEntity")
                        .WithMany("Nodes")
                        .HasForeignKey("FarmEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithMany("NodeHistory")
                        .HasForeignKey("NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeLocationEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithOne("Location")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.NodeLocationEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.NodeLocationHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeHistoryEntity", "NodeHistoryEntity")
                        .WithOne("Location")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.NodeLocationHistoryEntity", "NodeHistoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.PublicConfigEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithOne("PublicConfigs")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.PublicConfigEntity", "NodeEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ReservedResourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithOne("ReservedResources")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.ReservedResourcesEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ReservedResourcesHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeHistoryEntity", "NodeHistory")
                        .WithOne("ReservedResources")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.ReservedResourcesHistoryEntity", "NodeHistoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.ResourcePriceEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.FarmEntity", "FarmEntity")
                        .WithMany("ResourcePrices")
                        .HasForeignKey("FarmEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.TokenHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", null)
                        .WithMany("TokenHistory")
                        .HasForeignKey("NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.TotalResourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithOne("TotalResources")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.TotalResourcesEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.TotalResourcesHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeHistoryEntity", "NodeHistory")
                        .WithOne("TotalResources")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.TotalResourcesHistoryEntity", "NodeHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.UsedResourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithOne("UsedResources")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.UsedResourcesEntity", "NodeEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.UsedResourcesHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeHistoryEntity", "NodeHistory")
                        .WithOne("UsedResources")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.UsedResourcesHistoryEntity", "NodeHistoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.WalletAddressEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.FarmEntity", "FarmEntity")
                        .WithMany("WalletAddresses")
                        .HasForeignKey("FarmEntityId");

                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.FarmerEntity", null)
                        .WithMany("WalletAddressesCollection")
                        .HasForeignKey("FarmerEntityId");

                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.TokenHistoryEntity", "TokenHistoryEntity")
                        .WithMany("WalletAddress")
                        .HasForeignKey("TokenHistoryEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonEntities.WorkloadsEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonEntities.NodeEntity", "NodeEntity")
                        .WithOne("Workloads")
                        .HasForeignKey("DatabaseLib.Entities.NodeMonEntities.WorkloadsEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
