// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using JSON_Deserealising_Test;
//
//    var farm = Farm.FromJson(jsonString);

using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

namespace Models.ThreeFoldModels
{
    public partial class JsonFarm
    {
        [J("id")] public long FarmId { get; set; }
        [J("threebot_id")] public long ThreebotId { get; set; }
        [J("iyo_organization")] public string IyoOrganization { get; set; }
        [J("name")] public string Name { get; set; }
        [J("wallet_addresses")] public List<WalletAddress> WalletAddresses { get; set; }
        [J("location")] public FarmLocation Location { get; set; }
        [J("email")] public string Email { get; set; }
        [J("resource_prices")] public List<ResourcePrice> ResourcePrices { get; set; }
        [J("prefix_zero")] public string PrefixZero { get; set; }
    }

    public class FarmLocation
    {
        [J("city")] public string City_farm { get; set; }
        [J("country")] public string Country_farm { get; set; }
        [J("continent")] public string Continent_farm { get; set; }
        [J("latitude")] public long Latitude_farm { get; set; }
        [J("longitude")] public long Longitude_farm { get; set; }
    }

    public class WalletAddress
    {
        [J("asset")] public string Asset { get; set; }
        [J("address")] public string Address { get; set; }
    }

    public partial class ResourcePrice
    {
        [J("currency")] public long Currency { get; set; }
        [J("cru")] public long Cru { get; set; }
        [J("mru")] public long Mru { get; set; }
        [J("hru")] public long Hru { get; set; }
        [J("sru")] public long Sru { get; set; }
        [J("nru")] public long Nru { get; set; }
    }

    public partial class JsonFarm
    {
        public static JsonFarm FromJson(string json) => JsonConvert.DeserializeObject<JsonFarm>(json, FarmConverter.Settings);
    }
    public partial class JsonFarm
    {
        public static List<JsonFarm> FromJsonList(string jsonList) => JsonConvert.DeserializeObject<List<JsonFarm>>(jsonList, FarmConverter.Settings);
    }

    public static class FarmSerialize
    {
        public static string ToJson(this JsonFarm self) => JsonConvert.SerializeObject(self, FarmConverter.Settings);
    }

    internal static class FarmConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}