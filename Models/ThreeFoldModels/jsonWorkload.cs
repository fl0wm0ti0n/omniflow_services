// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NodeMonitor;
//
//    var public = Public.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

namespace Models.ThreeFoldModels
{
    public partial class JsonWorkload
    {
        [J("workload_id")] public long WorkloadId { get; set; }
        [J("node_id")] public string NodeId { get; set; }
        [J("pool_id")] public long PoolId { get; set; }
        [J("reference")] public string Reference { get; set; }
        [J("description")] public string Description { get; set; }
        [J("signing_request_provision")] public WorkloadSigningRequest SigningRequestProvision { get; set; }
        [J("signing_request_delete")] public WorkloadSigningRequest SigningRequestDelete { get; set; }
        [J("id")] public long Id { get; set; }
        [J("json")] public string Json { get; set; }
        [J("customer_tid")] public long CustomerTid { get; set; }
        [J("customer_signature")] public string CustomerSignature { get; set; }
        [J("next_action")] public long NextAction { get; set; }
        [J("signatures_provision")] public List<object> SignaturesProvision { get; set; }
        [J("signature_farmer")] public Signature SignatureFarmer { get; set; }
        [J("signatures_delete")] public List<Signature> SignaturesDelete { get; set; }
        [J("epoch")] public long Epoch { get; set; }
        [J("metadata")] public string Metadata { get; set; }
        [J("result")] public Result Result { get; set; }
        [J("workload_type")] public long WorkloadType { get; set; }
        [J("version")] public long Version { get; set; }
        [J("size", NullValueHandling = N.Ignore)] public long? Size { get; set; }
        [J("mode", NullValueHandling = N.Ignore)] public long? Mode { get; set; }
        [J("password", NullValueHandling = N.Ignore)] public string Password { get; set; }
        [J("disk_type", NullValueHandling = N.Ignore)] public long? DiskType { get; set; }
        [J("public", NullValueHandling = N.Ignore)] public bool? PublicPublic { get; set; }
        [J("stats_aggregator")] public List<object> StatsAggregator { get; set; }
        [J("flist", NullValueHandling = N.Ignore)] public Uri Flist { get; set; }
        [J("hub_url", NullValueHandling = N.Ignore)] public string HubUrl { get; set; }
        [J("environment", NullValueHandling = N.Ignore)] public Environment Environment { get; set; }
        [J("secret_environment", NullValueHandling = N.Ignore)] public SecretEnvironment SecretEnvironment { get; set; }
        [J("entrypoint", NullValueHandling = N.Ignore)] public string Entrypoint { get; set; }
        [J("interactive", NullValueHandling = N.Ignore)] public bool? Interactive { get; set; }
        [J("volumes", NullValueHandling = N.Ignore)] public List<Volume> Volumes { get; set; }
        [J("network_connection", NullValueHandling = N.Ignore)] public List<NetworkConnection> NetworkConnection { get; set; }
        [J("stats")] public object Stats { get; set; }
        [J("logs")] public List<object> Logs { get; set; }
        [J("capacity", NullValueHandling = N.Ignore)] public Capacity Capacity { get; set; }
        [J("type", NullValueHandling = N.Ignore)] public long? Type { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("network_iprange", NullValueHandling = N.Ignore)] public NetworkIprange? NetworkIprange { get; set; }
        [J("wireguard_private_key_encrypted", NullValueHandling = N.Ignore)] public string WireguardPrivateKeyEncrypted { get; set; }
        [J("wireguard_public_key", NullValueHandling = N.Ignore)] public string WireguardPublicKey { get; set; }
        [J("wireguard_listen_port", NullValueHandling = N.Ignore)] public long? WireguardListenPort { get; set; }
        [J("iprange", NullValueHandling = N.Ignore)] public string Iprange { get; set; }
        [J("peers", NullValueHandling = N.Ignore)] public List<WorkloadPeer> Peers { get; set; }
        [J("cluster_secret", NullValueHandling = N.Ignore)] public string ClusterSecret { get; set; }
        [J("network_id", NullValueHandling = N.Ignore)] public string NetworkId { get; set; }
        [J("ipaddress", NullValueHandling = N.Ignore)] public string Ipaddress { get; set; }
        [J("master_ips", NullValueHandling = N.Ignore)] public List<string> MasterIps { get; set; }
        [J("ssh_keys", NullValueHandling = N.Ignore)] public List<string> SshKeys { get; set; }
        [J("public_ip", NullValueHandling = N.Ignore)] public long? PublicIp { get; set; }
        [J("datastore_endpoint", NullValueHandling = N.Ignore)] public string DatastoreEndpoint { get; set; }
        [J("disable_default_ingress", NullValueHandling = N.Ignore)] public bool? DisableDefaultIngress { get; set; }
        [J("custom_size", NullValueHandling = N.Ignore)] public CustomSize CustomSize { get; set; }
    }

    public partial class Capacity
    {
        [J("cpu")] public long Cpu { get; set; }
        [J("memory")] public long Memory { get; set; }
        [J("disk_size")] public long DiskSize { get; set; }
        [J("disk_type")] public long DiskType { get; set; }
    }

    public partial class CustomSize
    {
        [J("cru")] public long Cru { get; set; }
        [J("mru")] public long Mru { get; set; }
        [J("sru")] public long Sru { get; set; }
    }

    public partial class Environment
    {
        [J("ACCESS_KEY", NullValueHandling = N.Ignore)] public string AccessKey { get; set; }
        [J("DATA", NullValueHandling = N.Ignore)] [JsonConverter(typeof(ParseStringConverter))] public long? Data { get; set; }
        [J("MINIO_PROMETHEUS_AUTH_TYPE", NullValueHandling = N.Ignore)] public string MinioPrometheusAuthType { get; set; }
        [J("PARITY", NullValueHandling = N.Ignore)] [JsonConverter(typeof(ParseStringConverter))] public long? Parity { get; set; }
        [J("SECRET_KEY", NullValueHandling = N.Ignore)] public string SecretKey { get; set; }
        [J("SHARDS", NullValueHandling = N.Ignore)] public string Shards { get; set; }
        [J("pub_key", NullValueHandling = N.Ignore)] public string PubKey { get; set; }
        [J("SSH_KEY", NullValueHandling = N.Ignore)] public string SshKey { get; set; }
    }

    public partial class NetworkConnection
    {
        [J("network_id")] public string NetworkId { get; set; }
        [J("ipaddress")] public string Ipaddress { get; set; }
        [J("public_ip6")] public bool PublicIp6 { get; set; }
        [J("yggdrasil_ip")] public bool YggdrasilIp { get; set; }
    }

    public partial class WorkloadPeer
    {
        [J("public_key")] public string PublicKey { get; set; }
        [J("endpoint")] public string Endpoint { get; set; }
        [J("iprange")] public string Iprange { get; set; }
        [J("allowed_iprange")] public List<string> AllowedIprange { get; set; }
    }

    public partial class Result
    {
        [J("category")] public long Category { get; set; }
        [J("workload_id")] public string WorkloadId { get; set; }
        [J("data_json")] public DataJson DataJson { get; set; }
        [J("signature")] public string Signature { get; set; }
        [J("state")] public long State { get; set; }
        [J("message")] public string Message { get; set; }
        [J("epoch")] public long Epoch { get; set; }
        [J("node_id")] public string NodeId { get; set; }
    }

    public partial class DataJson
    {
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
        [J("ipv6", NullValueHandling = N.Ignore)] public string Ipv6 { get; set; }
        [J("ipv4", NullValueHandling = N.Ignore)] public string Ipv4 { get; set; }
        [J("yggdrasil", NullValueHandling = N.Ignore)] public string Yggdrasil { get; set; }
        [J("volume_id", NullValueHandling = N.Ignore)] public string VolumeId { get; set; }
        [J("ip", NullValueHandling = N.Ignore)] public string Ip { get; set; }
        [J("Namespace", NullValueHandling = N.Ignore)] public string Namespace { get; set; }
        [J("IPs", NullValueHandling = N.Ignore)] public List<string> IPs { get; set; }
        [J("Port", NullValueHandling = N.Ignore)] public long? Port { get; set; }
    }

    public partial class SecretEnvironment
    {
        [J("SECRET_KEY", NullValueHandling = N.Ignore)] public string SecretKey { get; set; }
        [J("SHARDS", NullValueHandling = N.Ignore)] public string Shards { get; set; }
    }

    public partial class Signature
    {
        [J("tid")] public long Tid { get; set; }
        [J("signature")] public string SignatureSignature { get; set; }
        [J("epoch")] public long Epoch { get; set; }
    }

    public partial class WorkloadSigningRequest
    {
        [J("signers")] public List<long> Signers { get; set; }
        [J("quorum_min")] public long QuorumMin { get; set; }
    }

    public partial class Volume
    {
        [J("volume_id")] public string VolumeId { get; set; }
        [J("mountpoint")] public string Mountpoint { get; set; }
    }

    public enum NetworkIprange { The10100016, The101740016, The10310016, The10400016, The172160016, The172240016, The172260016, The172280016 };

    public partial class JsonWorkload
    {
        public static List<JsonWorkload> FromJson(string json) => JsonConvert.DeserializeObject<List<JsonWorkload>>(json, WorkloadConverter.Settings);
    }

    public static class WorkloadSerialize
    {
        public static string ToJson(this List<JsonWorkload> self) => JsonConvert.SerializeObject(self, WorkloadConverter.Settings);
    }

    internal static class WorkloadConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NetworkIprangeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class NetworkIprangeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NetworkIprange) || t == typeof(NetworkIprange?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "10.10.0.0/16":
                    return NetworkIprange.The10100016;
                case "10.174.0.0/16":
                    return NetworkIprange.The101740016;
                case "10.31.0.0/16":
                    return NetworkIprange.The10310016;
                case "10.40.0.0/16":
                    return NetworkIprange.The10400016;
                case "172.16.0.0/16":
                    return NetworkIprange.The172160016;
                case "172.24.0.0/16":
                    return NetworkIprange.The172240016;
                case "172.26.0.0/16":
                    return NetworkIprange.The172260016;
                case "172.28.0.0/16":
                    return NetworkIprange.The172280016;
            }
            throw new Exception("Cannot unmarshal type NetworkIprange");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NetworkIprange)untypedValue;
            switch (value)
            {
                case NetworkIprange.The10100016:
                    serializer.Serialize(writer, "10.10.0.0/16");
                    return;
                case NetworkIprange.The101740016:
                    serializer.Serialize(writer, "10.174.0.0/16");
                    return;
                case NetworkIprange.The10310016:
                    serializer.Serialize(writer, "10.31.0.0/16");
                    return;
                case NetworkIprange.The10400016:
                    serializer.Serialize(writer, "10.40.0.0/16");
                    return;
                case NetworkIprange.The172160016:
                    serializer.Serialize(writer, "172.16.0.0/16");
                    return;
                case NetworkIprange.The172240016:
                    serializer.Serialize(writer, "172.24.0.0/16");
                    return;
                case NetworkIprange.The172260016:
                    serializer.Serialize(writer, "172.26.0.0/16");
                    return;
                case NetworkIprange.The172280016:
                    serializer.Serialize(writer, "172.28.0.0/16");
                    return;
            }
            throw new Exception("Cannot marshal type NetworkIprange");
        }

        public static readonly NetworkIprangeConverter Singleton = new NetworkIprangeConverter();
    }
}
