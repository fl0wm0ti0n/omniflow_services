// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Models.ThreeFoldModels;
//
//    var jsonGateway = JsonGateway.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

namespace Models.ThreeFoldModels
{
    public partial class JsonGateway
    {
        [J("id")] public long Id { get; set; }
        [J("node_id")] public string NodeId { get; set; }
        [J("farm_id")] public long FarmId { get; set; }
        [J("os_version")] public string OsVersion { get; set; }
        [J("created")] public long Created { get; set; }
        [J("updated")] public long Updated { get; set; }
        [J("uptime")] public long Uptime { get; set; }
        [J("address")] public string Address { get; set; }
        [J("location")] public GatewayLocation Location { get; set; }
        [J("public_key_hex")] public string PublicKeyHex { get; set; }
        [J("workloads")] public GatewayWorkloads Workloads { get; set; }
        [J("managed_domains")] public List<string> ManagedDomains { get; set; }
        [J("tcp_router_port")] public long TcpRouterPort { get; set; }
        [J("dns_nameserver")] public List<string> DnsNameserver { get; set; }
        [J("free_to_use")] public bool FreeToUse { get; set; }
    }

    public partial class GatewayLocation
    {
        [J("city")] public string City { get; set; }
        [J("country")] public string Country { get; set; }
        [J("continent")] public Continent Continent { get; set; }
        [J("latitude")] public double Latitude { get; set; }
        [J("longitude")] public double Longitude { get; set; }
    }

    public partial class GatewayWorkloads
    {
        [J("network")] public long Network { get; set; }
        [J("network_resource")] public long NetworkResource { get; set; }
        [J("volume")] public long Volume { get; set; }
        [J("zdb_namespace")] public long ZdbNamespace { get; set; }
        [J("container")] public long Container { get; set; }
        [J("k8s_vm")] public long K8SVm { get; set; }
        [J("proxy")] public long Proxy { get; set; }
        [J("reverse_proxy")] public long ReverseProxy { get; set; }
        [J("subdomain")] public long Subdomain { get; set; }
        [J("delegate_domain")] public long DelegateDomain { get; set; }
    }

    public enum Continent { Asia, Europe, NorthAmerica };

    public partial class JsonGateway
    {
        public static List<JsonGateway> FromJson(string json) => JsonConvert.DeserializeObject<List<JsonGateway>>(json, GatewayConverter.Settings);
    }

    public static class GatewaySerialize
    {
        public static string ToJson(this List<JsonGateway> self) => JsonConvert.SerializeObject(self, GatewayConverter.Settings);
    }

    internal static class GatewayConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ContinentConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    internal class ContinentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Continent) || t == typeof(Continent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Asia":
                    return Continent.Asia;
                case "Europe":
                    return Continent.Europe;
                case "North America":
                    return Continent.NorthAmerica;
            }
            throw new Exception("Cannot unmarshal type Continent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Continent)untypedValue;
            switch (value)
            {
                case Continent.Asia:
                    serializer.Serialize(writer, "Asia");
                    return;
                case Continent.Europe:
                    serializer.Serialize(writer, "Europe");
                    return;
                case Continent.NorthAmerica:
                    serializer.Serialize(writer, "North America");
                    return;
            }
            throw new Exception("Cannot marshal type Continent");
        }

        public static readonly ContinentConverter Singleton = new ContinentConverter();
    }
}