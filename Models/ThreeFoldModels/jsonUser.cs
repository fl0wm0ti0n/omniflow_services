// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NodeMonitor;
//
//    var public = Public.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

namespace Models.ThreeFoldModels
{

    public partial class JsonUser
    {
        [J("id")] public long Id { get; set; }
        [J("name")] public string Name { get; set; }
        [J("email")] public string Email { get; set; }
        [J("pubkey")] public string Pubkey { get; set; }
        [J("host")] public string Host { get; set; }
        [J("description")] public string Description { get; set; }
    }

    public partial class JsonUser
    {
        public static List<JsonUser> FromJson(string json) => JsonConvert.DeserializeObject<List<JsonUser>>(json, UserConverter.Settings);
    }

    public static class UserSerialize
    {
        public static string ToJson(this List<JsonUser> self) => JsonConvert.SerializeObject(self, UserConverter.Settings);
    }

    internal static class UserConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
