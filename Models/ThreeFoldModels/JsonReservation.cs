// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Models.ThreeFoldModels;
//
//    var jsonReservations = JsonReservations.FromJson(jsonString);
using System;
using System.Collections.Generic;
using System.Globalization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

namespace Models.ThreeFoldModels
{

    public partial class JsonReservation
    {
        [J("id")] public long Id { get; set; }
        [J("json")] public string Json { get; set; }
        [J("data_reservation")] public DataReservation DataReservation { get; set; }
        [J("customer_tid")] public long CustomerTid { get; set; }
        [J("customer_signature")] public string CustomerSignature { get; set; }
        [J("next_action")] public long NextAction { get; set; }
        [J("signatures_provision")] public List<object> SignaturesProvision { get; set; }
        [J("signatures_farmer")] public List<object> SignaturesFarmer { get; set; }
        [J("signatures_delete")] public List<object> SignaturesDelete { get; set; }
        [J("epoch")] public long Epoch { get; set; }
        [J("metadata")] public string Metadata { get; set; }
        [J("results")] public List<object> Results { get; set; }
    }

    public partial class DataReservation
    {
        [J("description")] public string Description { get; set; }
        [J("currencies")] public object Currencies { get; set; }
        [J("signing_request_provision")] public ReservationSigningRequest SigningRequestProvision { get; set; }
        [J("signing_request_delete")] public ReservationSigningRequest SigningRequestDelete { get; set; }
        [J("containers")] public List<object> Containers { get; set; }
        [J("volumes")] public List<object> Volumes { get; set; }
        [J("zdbs")] public List<object> Zdbs { get; set; }
        [J("networks")] public List<Network> Networks { get; set; }
        [J("network_resource")] public object NetworkResource { get; set; }
        [J("kubernetes")] public List<object> Kubernetes { get; set; }
        [J("proxies")] public object Proxies { get; set; }
        [J("reverse_proxies")] public object ReverseProxies { get; set; }
        [J("subdomains")] public object Subdomains { get; set; }
        [J("domain_delegates")] public object DomainDelegates { get; set; }
        [J("gateway4to6")] public object Gateway4To6 { get; set; }
        [J("public_ips")] public object PublicIps { get; set; }
        [J("expiration_provisioning")] public long ExpirationProvisioning { get; set; }
        [J("expiration_reservation")] public long ExpirationReservation { get; set; }
    }

    public partial class Network
    {
        [J("name")] public string Name { get; set; }
        [J("workload_id")] public long WorkloadId { get; set; }
        [J("iprange")] public string Iprange { get; set; }
        [J("stats_aggregator")] public List<object> StatsAggregator { get; set; }
        [J("network_resources")] public List<NetworkResource> NetworkResources { get; set; }
        [J("farmer_tid")] public long FarmerTid { get; set; }
    }

    public partial class NetworkResource
    {
        [J("node_id")] public string NodeId { get; set; }
        [J("wireguard_private_key_encrypted")] public string WireguardPrivateKeyEncrypted { get; set; }
        [J("wireguard_public_key")] public string WireguardPublicKey { get; set; }
        [J("wireguard_listen_port")] public long WireguardListenPort { get; set; }
        [J("iprange")] public string Iprange { get; set; }
        [J("peers")] public List<ReservationPeer> Peers { get; set; }
    }

    public partial class ReservationPeer
    {
        [J("public_key")] public string PublicKey { get; set; }
        [J("endpoint")] public string Endpoint { get; set; }
        [J("iprange")] public string Iprange { get; set; }
        [J("allowed_iprange")] public List<string> AllowedIprange { get; set; }
    }

    public partial class ReservationSigningRequest
    {
        [J("signers")] public List<object> Signers { get; set; }
        [J("quorum_min")] public long QuorumMin { get; set; }
    }

    public partial class JsonReservation
    {
        public static List<JsonReservation> FromJson(string json) => JsonConvert.DeserializeObject<List<JsonReservation>>(json, Models.ThreeFoldModels.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<JsonReservation> self) => JsonConvert.SerializeObject(self, Models.ThreeFoldModels.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
