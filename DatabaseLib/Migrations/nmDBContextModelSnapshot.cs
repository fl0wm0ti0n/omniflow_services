// <auto-generated />
using System;
using DatabaseLib.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseLib.Migrations
{
    [DbContext(typeof(nmDBContext))]
    partial class nmDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseLib.Entities.AbonementEntity", b =>
                {
                    b.Property<int>("AbonementEntityEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbonementTargetTypEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserFk")
                        .HasColumnType("int");

                    b.HasKey("AbonementEntityEntityId");

                    b.HasIndex("AbonementTargetTypEntityId");

                    b.ToTable("nodemon_Abonement");
                });

            modelBuilder.Entity("DatabaseLib.Entities.AbonementSourceTypEntity", b =>
                {
                    b.Property<int>("AbonementSourceTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbonementSourceTypEntityId");

                    b.ToTable("nodemon_AbonementSourceTyp");
                });

            modelBuilder.Entity("DatabaseLib.Entities.AbonementTargetTypEntity", b =>
                {
                    b.Property<int>("AbonementTargetTypEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbonementTargetTypEntityId");

                    b.ToTable("nodemon_AbonementTyp");
                });

            modelBuilder.Entity("DatabaseLib.Entities.AbonementsToSourcesEntity", b =>
                {
                    b.Property<int>("AbonementEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AbonementSourceTypEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AbonementsSourcesEntityId")
                        .HasColumnType("int");

                    b.HasKey("AbonementEntityId", "AbonementSourceTypEntityId");

                    b.HasIndex("AbonementSourceTypEntityId");

                    b.ToTable("nodemon_AbonementsToSources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.FarmEntity", b =>
                {
                    b.Property<int>("FarmEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<string>("IyoOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefixZero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ThreebotId")
                        .HasColumnType("bigint");

                    b.HasKey("FarmEntityId");

                    b.ToTable("nodemon_Farm");
                });

            modelBuilder.Entity("DatabaseLib.Entities.FarmLocationEntity", b =>
                {
                    b.Property<int>("FarmLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City_farm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent_farm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_farm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Latitude_farm")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude_farm")
                        .HasColumnType("bigint");

                    b.HasKey("FarmLocationId");

                    b.HasIndex("FarmEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_FarmLocation");
                });

            modelBuilder.Entity("DatabaseLib.Entities.FarmerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IyoOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThreebotId")
                        .HasColumnType("bigint");

                    b.Property<int?>("WalletAddressesWalletAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletAddressesWalletAddressId");

                    b.ToTable("nodemon_Farmer");
                });

            modelBuilder.Entity("DatabaseLib.Entities.IfaceEntity", b =>
                {
                    b.Property<int>("IfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Macaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.HasKey("IfaceId");

                    b.HasIndex("NodeEntityId");

                    b.ToTable("nodemon_Iface");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeEntity", b =>
                {
                    b.Property<int>("NodeEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<int?>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FreeToUse")
                        .HasColumnType("bit");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NodeIdV1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OsVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proofs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKeyHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.Property<long>("Uptime")
                        .HasColumnType("bigint");

                    b.Property<string>("WgPorts")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NodeEntityId");

                    b.HasIndex("FarmEntityId");

                    b.ToTable("nodemon_Node");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeHistoryEntity", b =>
                {
                    b.Property<int>("NodeHistoryEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("NodeEntityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.Property<long>("Uptime")
                        .HasColumnType("bigint");

                    b.HasKey("NodeHistoryEntityId");

                    b.HasIndex("NodeEntityId");

                    b.ToTable("nodemon_NodeHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeLocationEntity", b =>
                {
                    b.Property<int>("NodeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContinentNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LatitudeNode")
                        .HasColumnType("float");

                    b.Property<double>("LongitudeNode")
                        .HasColumnType("float");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.HasKey("NodeLocationId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_NodeLocation");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeLocationHistoryEntity", b =>
                {
                    b.Property<int>("NodeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContinentNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LatitudeNode")
                        .HasColumnType("float");

                    b.Property<double>("LongitudeNode")
                        .HasColumnType("float");

                    b.Property<int>("NodeHistoryEntityId")
                        .HasColumnType("int");

                    b.HasKey("NodeLocationId");

                    b.HasIndex("NodeHistoryEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_NodeLocationHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonScheduleDaysEntity", b =>
                {
                    b.Property<int>("NodeMonScheduleDaysEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DayTypNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NodeMonScheduleDaysEntityId");

                    b.ToTable("nodemon_ScheduleDays");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonSchedulesEntity", b =>
                {
                    b.Property<int>("NodeMonSchedulesEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Intervall")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleTyp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimedIntervall")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NodeMonSchedulesEntityId");

                    b.ToTable("nodemon_Schedules");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonSchedulesToDaysEntity", b =>
                {
                    b.Property<int>("NodeMonSchedulesEntityId")
                        .HasColumnType("int");

                    b.Property<int>("NodeMonScheduleDaysEntityId")
                        .HasColumnType("int");

                    b.Property<int>("NodeMonSchedulesToDaysEntityId")
                        .HasColumnType("int");

                    b.HasKey("NodeMonSchedulesEntityId", "NodeMonScheduleDaysEntityId");

                    b.HasIndex("NodeMonScheduleDaysEntityId");

                    b.ToTable("nodemon_SchedulesToDays");
                });

            modelBuilder.Entity("DatabaseLib.Entities.ReservedResourcesEntity", b =>
                {
                    b.Property<int>("ReservedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("ReservedResourcesId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_ReservedResources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.ReservedResourcesHistoryEntity", b =>
                {
                    b.Property<int>("ReservedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeHistoryEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("ReservedResourcesId");

                    b.HasIndex("NodeHistoryEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_ReservedResourcesHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.ResourcePriceEntity", b =>
                {
                    b.Property<int>("ResourcePriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Currency")
                        .HasColumnType("bigint");

                    b.Property<int>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<long>("Nru")
                        .HasColumnType("bigint");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("ResourcePriceId");

                    b.HasIndex("FarmEntityId");

                    b.ToTable("nodemon_ResourcePrice");
                });

            modelBuilder.Entity("DatabaseLib.Entities.SettingsEntity", b =>
                {
                    b.Property<int>("SettingsEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTyp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingsEntityId");

                    b.ToTable("nodemon_Settings");
                });

            modelBuilder.Entity("DatabaseLib.Entities.ThreefoldApiUriEntity", b =>
                {
                    b.Property<int>("ThreefoldApiUriEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("List")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThreefoldApiUriEntityId");

                    b.ToTable("nodemon_ThreefoldApiUriList");
                });

            modelBuilder.Entity("DatabaseLib.Entities.TokenHistoryEntity", b =>
                {
                    b.Property<int>("TokenHistoryEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmountOfTokens")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayOutDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TokenHistoryEntityId");

                    b.HasIndex("NodeEntityId");

                    b.ToTable("nodemon_TokenHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.TotalResourcesEntity", b =>
                {
                    b.Property<int>("TotalResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("TotalResourcesId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_TotalResources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.TotalResourcesHistoryEntity", b =>
                {
                    b.Property<int>("TotalResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeHistoryId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("TotalResourcesId");

                    b.HasIndex("NodeHistoryId")
                        .IsUnique();

                    b.ToTable("nodemon_TotalResourcesHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.UsedResourcesEntity", b =>
                {
                    b.Property<int>("UsedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int?>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("UsedResourcesId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique()
                        .HasFilter("[NodeEntityId] IS NOT NULL");

                    b.ToTable("nodemon_UsedResources");
                });

            modelBuilder.Entity("DatabaseLib.Entities.UsedResourcesHistoryEntity", b =>
                {
                    b.Property<int>("UsedResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cru")
                        .HasColumnType("bigint");

                    b.Property<long>("Hru")
                        .HasColumnType("bigint");

                    b.Property<long>("Mru")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeHistoryEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Sru")
                        .HasColumnType("bigint");

                    b.HasKey("UsedResourcesId");

                    b.HasIndex("NodeHistoryEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_UsedResourcesHistory");
                });

            modelBuilder.Entity("DatabaseLib.Entities.WalletAddressEntity", b =>
                {
                    b.Property<int>("WalletAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FarmEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FarmerEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TokenHistoryEntityId")
                        .HasColumnType("int");

                    b.HasKey("WalletAddressId");

                    b.HasIndex("FarmEntityId");

                    b.HasIndex("FarmerEntityId");

                    b.HasIndex("TokenHistoryEntityId");

                    b.ToTable("nodemon_WalletAddress");
                });

            modelBuilder.Entity("DatabaseLib.Entities.WorkloadsEntity", b =>
                {
                    b.Property<int>("WorkloadsEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Container")
                        .HasColumnType("bigint");

                    b.Property<long>("DelegateDomain")
                        .HasColumnType("bigint");

                    b.Property<long>("K8SVm")
                        .HasColumnType("bigint");

                    b.Property<long>("Network")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeEntityId")
                        .HasColumnType("int");

                    b.Property<long>("Proxy")
                        .HasColumnType("bigint");

                    b.Property<long>("ReverseProxy")
                        .HasColumnType("bigint");

                    b.Property<long>("Subdomain")
                        .HasColumnType("bigint");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.Property<long>("ZdbNamespace")
                        .HasColumnType("bigint");

                    b.HasKey("WorkloadsEntityId");

                    b.HasIndex("NodeEntityId")
                        .IsUnique();

                    b.ToTable("nodemon_Workloads");
                });

            modelBuilder.Entity("DatabaseLib.Entities.AbonementEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.AbonementTargetTypEntity", "AbonementTargetTyp")
                        .WithMany("Abonements")
                        .HasForeignKey("AbonementTargetTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.AbonementsToSourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.AbonementEntity", "AbonementEntity")
                        .WithMany("AbonementsToSources")
                        .HasForeignKey("AbonementEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.AbonementSourceTypEntity", "AbonementSourceTyp")
                        .WithMany("AbonementsToSources")
                        .HasForeignKey("AbonementSourceTypEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.FarmLocationEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.FarmEntity", "FarmEntity")
                        .WithOne("Location")
                        .HasForeignKey("DatabaseLib.Entities.FarmLocationEntity", "FarmEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.FarmerEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.WalletAddressEntity", "WalletAddresses")
                        .WithMany()
                        .HasForeignKey("WalletAddressesWalletAddressId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.IfaceEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithMany("Interfaces")
                        .HasForeignKey("NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.FarmEntity", "FarmEntity")
                        .WithMany("Nodes")
                        .HasForeignKey("FarmEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithMany("NodeHistory")
                        .HasForeignKey("NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeLocationEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithOne("NodeLocation")
                        .HasForeignKey("DatabaseLib.Entities.NodeLocationEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeLocationHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeHistoryEntity", "NodeHistoryEntity")
                        .WithOne("NodeLocation")
                        .HasForeignKey("DatabaseLib.Entities.NodeLocationHistoryEntity", "NodeHistoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.NodeMonSchedulesToDaysEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeMonScheduleDaysEntity", "NodeMonScheduleDaysEntity")
                        .WithMany("SchedulesToDays")
                        .HasForeignKey("NodeMonScheduleDaysEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLib.Entities.NodeMonSchedulesEntity", "NodeMonSchedulesEntity")
                        .WithMany("SchedulesToDays")
                        .HasForeignKey("NodeMonSchedulesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.ReservedResourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithOne("ReservedResources")
                        .HasForeignKey("DatabaseLib.Entities.ReservedResourcesEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.ReservedResourcesHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeHistoryEntity", "NodeHistory")
                        .WithOne("ReservedResources")
                        .HasForeignKey("DatabaseLib.Entities.ReservedResourcesHistoryEntity", "NodeHistoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.ResourcePriceEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.FarmEntity", "FarmEntity")
                        .WithMany("ResourcePrices")
                        .HasForeignKey("FarmEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.TokenHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithMany("TokenHistory")
                        .HasForeignKey("NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.TotalResourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithOne("TotalResources")
                        .HasForeignKey("DatabaseLib.Entities.TotalResourcesEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.TotalResourcesHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeHistoryEntity", "NodeHistory")
                        .WithOne("TotalResources")
                        .HasForeignKey("DatabaseLib.Entities.TotalResourcesHistoryEntity", "NodeHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.UsedResourcesEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithOne("UsedResources")
                        .HasForeignKey("DatabaseLib.Entities.UsedResourcesEntity", "NodeEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.UsedResourcesHistoryEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeHistoryEntity", "NodeHistory")
                        .WithOne("UsedResources")
                        .HasForeignKey("DatabaseLib.Entities.UsedResourcesHistoryEntity", "NodeHistoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLib.Entities.WalletAddressEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.FarmEntity", "FarmEntity")
                        .WithMany("WalletAddresses")
                        .HasForeignKey("FarmEntityId");

                    b.HasOne("DatabaseLib.Entities.FarmerEntity", null)
                        .WithMany("WalletAddressesCollection")
                        .HasForeignKey("FarmerEntityId");

                    b.HasOne("DatabaseLib.Entities.TokenHistoryEntity", "TokenHistoryEntity")
                        .WithMany("WalletAddress")
                        .HasForeignKey("TokenHistoryEntityId");
                });

            modelBuilder.Entity("DatabaseLib.Entities.WorkloadsEntity", b =>
                {
                    b.HasOne("DatabaseLib.Entities.NodeEntity", "NodeEntity")
                        .WithOne("Workloads")
                        .HasForeignKey("DatabaseLib.Entities.WorkloadsEntity", "NodeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
